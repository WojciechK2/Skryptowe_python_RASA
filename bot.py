#bot2_custom_client.py

import os
import discord
from dotenv import load_dotenv
from datetime import datetime
#custom scripts
from RASA_conn import RASA_messageAPICall

load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN') #an token generated by Discord : Location -> .env file
GUILD = os.getenv('DISCORD_GUILD') #guild/server name in which bot is supposed to be runing : Location -> .env file

#intents = discord.Intents.default() # to get currently connected users/perform administrative tasks, needs to be allowed on the discord backend 
#https://discordpy.readthedocs.io/en/stable/intents.html
#intents.members = True

client = discord.Client()# (intents=intents) #if we want to perform administratve tasks

@client.event
async def on_ready():
	guild = discord.utils.get(client.guilds, name=GUILD)
	print(f'{client.user} has connected to Discord!')
	print(f'{client.user} is running in {guild}')
		
@client.event
async def on_message(message):
	if message.author == client.user:
		return
	
	if client.user.mentioned_in(message) and message.mention_everyone is False:
	
		#stripping mentions from message
		msg = message.clean_content.replace("@ "+client.user.name,"")
	
		answers = RASA_messageAPICall(message.clean_content, str(message.author))
		return_string = "\n".join(answers)
	
		return await message.channel.send(f'{message.author.mention} ' + return_string)
	else: 
		return
		
@client.event
async def on_error(event, *args, **kwargs):
	dt = datetime.now()
	with open('.err.log','a') as f:
		if event == 'on_message':
			f.write(f'{dt} : Unhandled message: {args[0]}\n')
		if event == 'on_member_join':
			f.write(f'{dt} : Bad Join: {args[0]}\n')
		else:
			raise
			
client.run(TOKEN)
